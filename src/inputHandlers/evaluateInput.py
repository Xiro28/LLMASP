from dataclasses import dataclass, field
from typeguard import typechecked
from inputHandlers.abstractInputHandler import AbstractInputHandler
from utils.classBuilder import ClassBuilder


@typechecked
@dataclass(frozen=False)
class EvaluateInput(AbstractInputHandler):

    def __post_init__ (self):
        self._AbstractInputHandler__system_prompt: str = f"""You are a Natural Language to Datalog translator. 
                                To translate the input to Datalog, you will be asked a sequence of questions. 
                                The answers are inside the user input provided with 'USER_INPUT: input'.
                                Output predicate is a lowercase string (possibly including underscores).  
                                Terms is a comma-separated list of either double quoted strings or integers. 
                                Be sure to control the number of terms in each answer!
                                A predicate MUST terminate with a period.
                                An answer MUST NOT be answered if it is not present in the user input.
                                Remember these instructions and don't say anything!"""

        super().__post_init__()

         ## Create the classes needed for the instructor LLM
        self.__classes = ClassBuilder().build_classes(self._AbstractInputHandler__config['preprocessing']).get_classes()

    def __pre_input_seasoning__(self, user_input: str) -> list:
        """
            Enhances the given input with additional information from the config file to help with the ASP atom extraction.
            
            Parameters:
                user_input: str: The input to be seasoned.
                
            Returns:
                str: The seasoned input with added information to help the LLM for ASP atom extraction.
        """

        questions = self._AbstractInputHandler__config['preprocessing']
        the_user_input = f"USER_INPUT: {user_input}"
        prompt = []

        for q in questions:

            q_key, q_value = list(q.items())[0]

            if q_key == '_':
                prompt.append(f"""Here is some context that you MUST analyze and remember.
                            {q_value}
                            Remember this context and don't say anything!\n
                            """)
            else:
                prompt.append(f"""{q_value}. User will expect the datalog predicate in the format: '{q_key}.'\n
                            {the_user_input}
                            """)

        return prompt

    def __natural_to_asp__(self, user_input: str) -> str:
        """
            Convert natural language input to ASP (Answer Set Programming) format.
            
            This method takes a natural language input provided by the user and converts it
            into ASP format using the invoke_llm from the LLMHandler class. It preprocesses
            the input by performing input seasoning to extract the atoms contained into the config file,
            and then filters the ASP atoms from the response generated by the LLMHandler.
            
            Parameters:
                user_input (str): The natural language input provided by the user.
                
            Returns:
                str: The ASP-formatted output generated from the natural language input.
        """

        F = ""

        _list = list(self.__classes.items())

        for i, atom in enumerate(self.__pre_input_seasoning__(user_input)):
            if "Here is some context that you MUST analyze and remember." in atom:
                continue

            response =  self._AbstractInputHandler__llm_instance.invoke_llm_constrained(atom, _list[i-1])
            F += ' ' + self.__filter_asp_atoms__(response)

        return F
    

    def run(self, TRAIN_ON: bool = False) -> str:
        """
            Run the input handler to convert the user input to ASP format.
            
            This method takes user input and converts it to ASP format using the natural_to_asp method.
            It then returns the ASP-formatted output.
                
            Returns:
                str: The ASP-formatted output generated from the user input.
        """
        user_input = input(">: ")
        response = self.__natural_to_asp__(user_input)

        #Disable for now
        if TRAIN_ON and False:
            out: str = input(f"Do you want to salve to rag_doc these results: {self.preds}? (y/n): ")

            if out == "y":
                self.__docs_rag.append({"prompt": user_input, "response": self.preds})
                yaml.dump(self.__docs_rag, open(self.__ragDatabaseFilename, "w"))

        return self.__filter_asp_atoms__(response)
